React session March 31st 2025


Pre-test:  https://forms.office.com/r/2pvDgZ2yLz 


Git Url: https://github.com/aniljos/React-Lnw
REST API Mock: https://github.com/aniljos/REST-API-Mock

Babel cdn: https://cdnjs.com/libraries/babel-standalone/7.26.3

Introduction: https://forms.gle/A2CsyCwZMXGb4DLJ7

Quiz 1: https://forms.gle/KoLHWoqR9c45a3pK9
Quiz 2: https://forms.gle/iVvDAzDXf5K3sUjS8
Quiz 3: https://forms.gle/GCCb7bY5VCt5iJfT9

Scope
	- let/const
	- var keyword
	
IIFE = Immedialtly invoked function expression

Component props
	- parameters to components
	- props always read-only
	- <Message text="abc"/>  => props.text
	- <Message>hello</Message> => props.children
	
State
	- overloads
		- set(updatedValue)
		- set(callback) => function callback(currentValue){return "updated value"}
	- states updates are asynchronous.
	- state updates are batched
		- counter: 5
		- setCounter(counter + 1); => setCounter(6)
        - setCounter(counter + 1); => setCounter(6)
		- setCounter(currentCount => currentCount + 1); => setCounter(invoke the callback) => currentCount=5
		- setCounter(currentCount => currentCount + 1); => setCounter(invoke the callback) => currentCount=6
	- state must be treated as immutable
		- To change/modify: create a copy, change the copy, set the state
		
useEffect
	- mount
		- API call to be invoked once after the component is rendered.
		- DOM initialization 
		- register event handlers on the window or document object
	- unmount
		- Cancel any pending api calls
		- unregister event handlers
		
forms
	- controlled inputs
		- every form control is bound to a state(useState) and handle the onChange event
		- reactive form
	- uncontrolled inputs
		- reference(useRef) to the input => get/set
	
API calls
	1. XMLHttpRequest object
	2. Fetch api's 
	
CSS
	- inline => style
	- reuseable => class
	
React router
	- useNavigate
	- useParams - url params
	
Design & Optimization
	- Components to be smaller(modular)
		- Segregation of responsibilities, optimize, testing
	-Optimization
		- React.memo
			- caches(memoization) the component
			- cache is invalidated when the props are changed.
		- Hooks
			- useMemo
			- useCallback
	- Design : Modular, reuseable
		- HOC (higher-order component) => Design pattern
			- An hoc is a function that takes a component and returns a new component.
		- Custom Hooks
			- Modular, reuse
			
State 
	- Browser
		- Cookies
		- LocalStorage: Persistant, window.localStorage -> setItem, getItem
		- SessionStorage: Non-persistant, window.sessionStorage -> setItem, getItem
	- Browser Memory
		- Redux, react context

Redux
	- Action: an object
		- The task to execute
		- { type: "save_token", token: "abc123"}
		- { type: "clear_token"}
	- Reducer: a function
		- receives the action(s) and updates the store
		- one reducer per store
			- write multiple reducres and combine to a single reducer
	- Store
		- One per application
			
React-redux
	- Provider component
		- integrates the redux store to react component tree.
	- Hooks
		- useDispatch: returns the dispatch
		- useSelector: select a state from redux(subscribe)
		- useStore: returns a refrence to the store
		
Redux	
	- Action creators: helper methods to create an action
	- Middleware: intercepts the action before its handled by the reducer
		- logging, validations, asynchronous operations
		- asynchronous operations: library => redux-thunk, redux-saga
	- State is immutable
		- Pattern to treat state as mutable
redux toolkit
	- Generated action creators
	- Integrates with redux-thunk, redux-saga
	- State is mutable
	
Redux-persist
	- Save redux to the local storage
	
React Context
	- Low-level API, we have create layer/library 
	- Multiple Contexts
	- React.createContext
	- Hook: useContext